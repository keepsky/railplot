-- Check that we at least have an input filename.
-- If not, print the help message and exit.
check_args(input_file ~= nil, "No input file given")

style = style or "simple"

-- Gather input
if input_format == "railml" then
    model = load_railml { 
        -- Load a railml file.
        filename = input_file,

        -- Extract objects from each track.
        track_objects = function(track)
            objs = {}
            if track.ocsElements ~= nil then
                extend(objs,track.ocsElements.signals)
                extend(objs,track.ocsElements.trainDetectionElements)
                extend(objs,track.ocsElements.balise)
            end
            return objs
        end,

        -- Use each railml element's absPos value for linear positioning.
        -- This requires the file to be direction-consistent (meaning, for example,
        -- that outgoing switches can only connect to beginnings of other tracks,
        -- and incoming switches to the ends of other tracks).
        -- And it requires the linear positions (absolute positions) 
        -- to be consistent with the directions.
        get_pos = function(o) return o.absPos or o.pos end,

        -- Get the symbol info, i.e. level, width, origin and linear position.
        symbol_info = function(o) 
            level = o.dir == "up" and -1 or 1
            return { pos = o.absPos or o.pos, width=0.4, origin = 0.0,level=level }
        end,
    }

else
    error "Unknown input format."
end

-- Run the solver 
output = plot_network {
    model=model,
}

-- Write output
--
if output_format == nil or output_format == "json" then
    -- JSON output is simply a dump of the output from plot_network.
    -- It consists of node coodinates, edge polylines, and symbol coordinates.
    write(output_file, to_json_pretty(output))

elseif output_format == "tikz" or output_format == "pdf" then
    -- TiKZ is a graphics package for LaTeX (see 
    -- https://en.wikibooks.org/wiki/LaTeX/PGF/TikZ).
    -- Built-in functions draw tracks and filled switches, and 
    -- translate and rotate the symbols in place. The draw argument
    -- to the tikz_symbols function is called for each symbol, and should
    -- return a string, which is placed into the TikZ output verbatim.
    tikz = ""
    tikz = tikz .. (tikz_tracks   { data = output, style = "ultra thick, black" })
    tikz = tikz .. (tikz_switches { data = output, style = "" })
    tikz = tikz .. (tikz_symbols  { data = output, draw = function(o) 
        x0,y0 = -o._symbol_info.origin, 0
        x1,y1 = o._symbol_info.width, -0.25*o._symbol_info.level
        return "\\draw ("..x0..","..y0..") rectangle ("..x1..","..y1..");"
    end })

    if output_format == "tikz" then 
        write(output_file, tikz)
    else 
        -- PDF output is generated by calling pdflatex on the TikZ code.
        check_args(output_file ~= nil and output_file ~= "-", 
            "Output filename required for PDF output")
        tikzpdf(output_file,tikz)
    end


elseif output_format == "svg" or output_format == "png" then
    scale = 100.0
    size = drawing_size { data = output }
    svg = ""
    svg = svg .. (svg_tracks   { data = output, scale=scale, size=size,
        style="fill=\"none\" stroke=\"black\" stroke-width=\"5\"" })
    svg = svg .. (svg_switches { data = output, scale=scale, size=size,
        style="fill=\"black\"" })
    svg = svg .. (svg_symbols  { data = output, scale=scale, size=size,
        draw = function(o) 
            x0,y0 = -o._symbol_info.origin, 0
            x1,y1 = o._symbol_info.width, -0.25*o._symbol_info.level
            return ""
        end })
    svg = svg_document { contents = svg, scale = scale, size = size }

    if output_format == "svg" then
        write(output_file, svg)
    else
        check_args(output_file ~= nil and output_file ~= "-")
        rsvgpng(output_file,svg, {background_color="white"})
    end

else
    error "Unknown output format."
end


